From 71140c34026feb16afb50eccbe49eb0abde4d2cd Mon Sep 17 00:00:00 2001
From: Samuel Dionne-Riel <samuel@dionne-riel.com>
Date: Tue, 7 Jul 2020 05:04:53 -0400
Subject: [PATCH 1/3] vidconsole-uclass: Implement ANSI_CURSOR_COLUMN

---
 drivers/video/vidconsole-uclass.c | 12 ++++++++++++
 1 file changed, 12 insertions(+)

diff --git a/drivers/video/vidconsole-uclass.c b/drivers/video/vidconsole-uclass.c
index f42db40d4cd..95200019363 100644
--- a/drivers/video/vidconsole-uclass.c
+++ b/drivers/video/vidconsole-uclass.c
@@ -317,6 +317,18 @@ static void vidconsole_escape_char(struct udevice *dev, char ch)
 		set_cursor_position(priv, row, col);
 		break;
 	}
+	case 'G': {
+		int row, col;
+		get_cursor_position(priv, &row, &col);
+		char *s = priv->escape_buf;
+		s++;    /* [ */
+		s = parsenum(s, &col);
+		col = col-1;
+		if (col < 0)
+			col = 0;
+		set_cursor_position(priv, row, col);
+		break;
+	}
 	case 'H':
 	case 'f': {
 		int row, col;
-- 
2.35.1


From 60bcbba0ea8dae85bb6132517792aea1d2648ff8 Mon Sep 17 00:00:00 2001
From: Samuel Dionne-Riel <samuel@dionne-riel.com>
Date: Tue, 7 Jul 2020 22:17:36 -0400
Subject: [PATCH 2/3] autoboot: Make all prompts configurable

This is a multi-purpose commit. Though it is hard to split into distinct
changes.

1. Allows the non-keyed prompt to be configured

This is self-explanatory. This allows better customization for the
integrator. Though, more to the point, this reduces the confusion that
comes from the option name and description. Now it is used for all
auto-boot prompts, not only for the keyed prompt.

2. Redraws using ANSI escapes

This is required for (1), as we can't backspace over the arbitrary
amount of characters to redraw the countdown.

This is done through resetting the column to 1 and clearing the line for
maximum compatibility. Tested against serial, default dm_video and the
truetype console.
---
 boot/Kconfig      |  4 ++--
 common/autoboot.c | 11 ++++++++---
 2 files changed, 10 insertions(+), 5 deletions(-)

diff --git a/boot/Kconfig b/boot/Kconfig
index 08451c65a56..f7d76b10508 100644
--- a/boot/Kconfig
+++ b/boot/Kconfig
@@ -1002,8 +1002,8 @@ config AUTOBOOT_FLUSH_STDIN
 
 config AUTOBOOT_PROMPT
 	string "Autoboot stop prompt"
-	depends on AUTOBOOT_KEYED
-	default "Autoboot in %d seconds\\n"
+	default "Autoboot in %d seconds\\n" if AUTOBOOT_KEYED
+	default "Hit any key to stop autoboot: %2d \\n"
 	help
 	  This string is displayed before the boot delay selected by
 	  CONFIG_BOOTDELAY starts. If it is not defined	there is no
diff --git a/common/autoboot.c b/common/autoboot.c
index 63f2587941d..db7cdf7ade8 100644
--- a/common/autoboot.c
+++ b/common/autoboot.c
@@ -5,6 +5,7 @@
  */
 
 #include <common.h>
+#include <ansi.h>
 #include <autoboot.h>
 #include <bootretry.h>
 #include <cli.h>
@@ -365,14 +366,16 @@ static int abortboot_single_key(int bootdelay)
 	int abort = 0;
 	unsigned long ts;
 
-	printf("Hit any key to stop autoboot: %2d ", bootdelay);
+	printf(CONFIG_AUTOBOOT_PROMPT, bootdelay);
 
 	/*
 	 * Check if key already pressed
 	 */
 	if (tstc()) {	/* we got a key press	*/
 		getchar();	/* consume input	*/
-		puts("\b\b\b 0");
+		puts(ANSI_CLEAR_LINE);
+		printf(ANSI_CURSOR_COLUMN, 1);
+		printf(CONFIG_AUTOBOOT_PROMPT, 0);
 		abort = 1;	/* don't auto boot	*/
 	}
 
@@ -394,7 +397,9 @@ static int abortboot_single_key(int bootdelay)
 			udelay(10000);
 		} while (!abort && get_timer(ts) < 1000);
 
-		printf("\b\b\b%2d ", bootdelay);
+		puts(ANSI_CLEAR_LINE);
+		printf(ANSI_CURSOR_COLUMN, 1);
+		printf(CONFIG_AUTOBOOT_PROMPT, bootdelay);
 	}
 
 	putc('\n');
-- 
2.35.1


From 37d79f99c47a4dca7ea0a9d3454544c61a0af856 Mon Sep 17 00:00:00 2001
From: Samuel Dionne-Riel <samuel@dionne-riel.com>
Date: Thu, 9 Jul 2020 02:50:29 -0400
Subject: [PATCH 3/3] cli: Clear ctrl+c before running a command

This fixes an issue where:

With an environment like so:

    bootmenu_0=Default U-Boot boot=run distro_bootcmd; $menucmd -1

  * Running bootmenu
  * Running the option
  * Cancelling using CTRL-C

Would show the menu as expected, but running *any* command
post-cancellation would spuriously exit in unexplainable ways.
---
 common/cli.c | 9 +++++++++
 1 file changed, 9 insertions(+)

diff --git a/common/cli.c b/common/cli.c
index a7e3d84b68f..b4b84bc30eb 100644
--- a/common/cli.c
+++ b/common/cli.c
@@ -45,6 +45,9 @@ int run_command(const char *cmd, int flag)
 
 	if (flag & CMD_FLAG_ENV)
 		hush_flags |= FLAG_CONT_ON_NEWLINE;
+
+	clear_ctrlc();		/* forget any previous Control C */
+
 	return parse_string_outer(cmd, hush_flags);
 #endif
 }
@@ -65,6 +68,9 @@ int run_command_repeatable(const char *cmd, int flag)
 	 * parse_string_outer() returns 1 for failure, so clean up
 	 * its result.
 	 */
+
+	clear_ctrlc();		/* forget any previous Control C */
+
 	if (parse_string_outer(cmd,
 			       FLAG_PARSE_SEMICOLON | FLAG_EXIT_FROM_LOOP))
 		return -1;
@@ -105,6 +111,9 @@ int run_command_list(const char *cmd, int len, int flag)
 		buff[len] = '\0';
 	}
 #ifdef CONFIG_HUSH_PARSER
+
+	clear_ctrlc();		/* forget any previous Control C */
+
 	rcode = parse_string_outer(buff, FLAG_PARSE_SEMICOLON);
 #else
 	/*
-- 
2.35.1

