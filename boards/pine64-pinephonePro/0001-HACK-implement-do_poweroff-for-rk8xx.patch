From a939c4eb5b55a021d030894fb0aa0654fc41ea02 Mon Sep 17 00:00:00 2001
From: Samuel Dionne-Riel <samuel@dionne-riel.com>
Date: Sat, 18 Dec 2021 15:28:06 -0500
Subject: [PATCH] =?UTF-8?q?[HACK]=C2=A0implement=20`do=5Fpoweroff`=20for?=
 =?UTF-8?q?=20rk8xx?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

In reality this should probably be moved into a "shim" library like
`drivers/power/pmic-poweroff.c`.

Though it's unclear if it would be appropriate, considering that would
not take `rockchip,system-power-controller` into account.

In actuality it will require someone that better knows PMIC, PSCI,
for RK3399 and other devices, to know how to do the correct
implementation.

For the time being, this works.
---
 drivers/firmware/psci.c    |  2 ++
 drivers/power/pmic/rk8xx.c | 27 +++++++++++++++++++++++++++
 2 files changed, 29 insertions(+)

diff --git a/drivers/firmware/psci.c b/drivers/firmware/psci.c
index 657e7eb5ae..eec2f1f24d 100644
--- a/drivers/firmware/psci.c
+++ b/drivers/firmware/psci.c
@@ -210,6 +210,7 @@ void psci_sys_poweroff(void)
 	invoke_psci_fn(PSCI_0_2_FN_SYSTEM_OFF, 0, 0, 0);
 }
 
+#ifndef CONFIG_PMIC_RK8XX // *barfs* (workaround for lack of handling rockchip,system-power-controller)
 #if IS_ENABLED(CONFIG_CMD_POWEROFF) && !IS_ENABLED(CONFIG_SYSRESET_CMD_POWEROFF)
 int do_poweroff(struct cmd_tbl *cmdtp, int flag, int argc, char *const argv[])
 {
@@ -226,6 +227,7 @@ int do_poweroff(struct cmd_tbl *cmdtp, int flag, int argc, char *const argv[])
 	return CMD_RET_FAILURE;
 }
 #endif
+#endif
 
 static const struct udevice_id psci_of_match[] = {
 	{ .compatible = "arm,psci" },
diff --git a/drivers/power/pmic/rk8xx.c b/drivers/power/pmic/rk8xx.c
index f7450dd0c4..4b873a39ba 100644
--- a/drivers/power/pmic/rk8xx.c
+++ b/drivers/power/pmic/rk8xx.c
@@ -10,6 +10,7 @@
 #include <log.h>
 #include <power/rk8xx_pmic.h>
 #include <power/pmic.h>
+#include <linux/delay.h>
 
 static struct reg_data rk817_init_reg[] = {
 /* enable the under-voltage protection,
@@ -235,3 +236,29 @@ U_BOOT_DRIVER(rockchip_rk805) = {
 };
 
 DM_DRIVER_ALIAS(rockchip_rk805, rockchip_rk808)
+
+#ifdef CONFIG_CMD_POWEROFF
+// TODO: implement handling of: rockchip,system-power-controller
+int do_poweroff(struct cmd_tbl *cmdtp, int flag, int argc, char *const argv[])
+{
+	struct udevice *pmic;
+	int ret;
+
+	ret = uclass_get_device_by_driver(UCLASS_PMIC, DM_DRIVER_GET(rockchip_rk805), &pmic);
+
+	if (ret != 0) {
+		printf("Failure in `do_poweroff` getting PMIC; ret=%d\n", ret);
+		return ret;
+	}
+
+	/* wait uart flush before shutdown */
+	mdelay(5);
+
+	/* PMIC shutdown */
+	pmic_shutdown(pmic);
+
+	panic("Cpu should never reach here, shutdown failed !");
+
+	return 0;
+}
+#endif
-- 
2.34.0

